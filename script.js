// firebase

// navbar change on scroll

// about me section

const revealObserver = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.add("visible");
      } else {
        entry.target.classList.remove("visible"); // ‚ùó fades out when leaving view
      }
    });
  },
  {
    threshold: 0.2,
  }
);

document.querySelectorAll(".scroll-reveal").forEach((el) => {
  revealObserver.observe(el);
});

// scroll

window.addEventListener("scroll", function () {
  const navbar = document.querySelector(".navbar");
  if (window.scrollY > 50) {
    navbar.classList.add("scrolled");
  } else {
    navbar.classList.remove("scrolled");
  }
});

// head slider

(function () {
  const slides = document.querySelectorAll(".slider .slide");
  const prevBtn = document.querySelector(".nav-prev");
  const nextBtn = document.querySelector(".nav-next");
  const progressBar = document.querySelector(".progress-bar");
  let currentIndex = 0;
  const slideCount = slides.length;
  const intervalTime = 6000; // 6 seconds
  let timer;

  function resetProgress() {
    progressBar.style.transition = "none";
    progressBar.style.width = "0";
    // Force reflow
    progressBar.offsetWidth;
    progressBar.style.transition = `width ${intervalTime}ms linear`;
    progressBar.style.width = "100%";
  }

  function showSlide(index) {
    slides.forEach((slide, i) => {
      slide.classList.toggle("active", i === index);
    });
    resetProgress();
  }

  function goTo(index) {
    clearInterval(timer);
    currentIndex = (index + slideCount) % slideCount;
    showSlide(currentIndex);
    startTimer();
  }

  function nextSlide() {
    goTo(currentIndex + 1);
  }
  function prevSlide() {
    goTo(currentIndex - 1);
  }

  prevBtn.addEventListener("click", prevSlide);
  nextBtn.addEventListener("click", nextSlide);

  function startTimer() {
    resetProgress();
    timer = setInterval(nextSlide, intervalTime);
  }

  // Initialize
  showSlide(currentIndex);
  startTimer();
})();

// bubble active button clicked -.333333333//todo redundant code ????
document.querySelectorAll(".category-button").forEach((button) => {
  button.addEventListener("click", () => {
    // Remove 'active' class from all buttons
    document
      .querySelectorAll(".category-button")
      .forEach((btn) => btn.classList.remove("active"));

    // Add 'active' class to the clicked button
    button.classList.add("active");

    // Filter the gallery
    const selectedCategory = button.getAttribute("data-category");
    renderGallery(selectedCategory);
  });
});
//
// Array of image objects
const images = [
  {
    src: "./imgaes/concept/capsules/capsuls.png",
    title: "ReStreet | ◊ß◊§◊°◊ï◊ú◊ï◊™ ◊ú◊ì◊®◊ô ◊®◊ó◊ï◊ë",
    date: '◊™◊©◊§"◊ë | ◊°◊û◊°◊ò◊® ◊ê◊ë◊ô◊ë 2022',
    location: "Hadar Neighborhood, Haifa",
    exactLocation: { x: 32.8151, y: 34.9984 },
    category: "concept",
    objectPosition: "top",
    description: `◊î◊†◊ï◊©◊ê ◊î◊†◊ó◊ß◊® | ◊ê◊ï◊õ◊ú◊ï◊°◊ô◊ô◊™ ◊ì◊®◊ô ◊î◊®◊ó◊ï◊ë ◊ï◊¶◊®◊õ◊ô◊î◊ù ◊î◊§◊ô◊ñ◊ô◊ô◊ù, ◊î◊ó◊ë◊®◊™◊ô◊ô◊ù ◊ï◊î◊†◊§◊©◊ô◊ô◊ù.`,
    description1: `◊ß◊ï◊®◊° ◊ô◊ô◊©◊ï◊ù ◊ò◊õ◊†◊ï◊ú◊ï◊í◊ô | ◊ß◊§◊°◊ï◊ú◊ï◊™ ◊©◊ô◊†◊î ◊¢◊ë◊ï◊® ◊ì◊®◊ô ◊î◊®◊ó◊ï◊ë ◊ë◊©◊õ◊ï◊†◊™ ◊î◊ì◊®, ◊ó◊ô◊§◊î.`,
    extraParagraph: `◊ì◊®◊ô ◊î◊®◊ó◊ï◊ë ◊û◊™◊û◊ï◊ì◊ì◊ô◊ù ◊¢◊ù ◊û◊¶◊ï◊ß◊î ◊ß◊ô◊ï◊û◊ô◊™ ◊û◊™◊û◊©◊õ◊™, ◊õ◊ê◊©◊® ◊î◊®◊ó◊ï◊ë ◊û◊©◊û◊© ◊ú◊î◊ù ◊ë◊ô◊™ ◊ë◊î◊ô◊¢◊ì◊® ◊ê◊§◊©◊®◊ï◊ô◊ï◊™ ◊ê◊ó◊®◊ï◊™. ◊î◊§◊®◊ï◊ô◊ß◊ò ◊©◊ú◊†◊ï ◊û◊¶◊ô◊¢ ◊û◊¢◊†◊î ◊õ◊ï◊ú◊ú◊†◊ô ◊ú◊©◊ô◊§◊ï◊® ◊™◊†◊ê◊ô ◊ó◊ô◊ô◊î◊ù ◊ë◊©◊†◊ô ◊û◊ô◊©◊ï◊®◊ô◊ù ‚Äì ◊î◊§◊ô◊ñ◊ô ◊ï◊î◊ó◊ë◊®◊™◊ô. ◊õ◊ê◊ì◊®◊ô◊õ◊ú◊ô◊ù ◊ú◊¢◊™◊ô◊ì, ◊ê◊†◊ï ◊¢◊ï◊°◊ß◊ô◊ù ◊ë◊©◊ê◊ú◊î "◊û◊î◊ï ◊ë◊ô◊™?" ◊ï◊û◊ë◊ô◊†◊ô◊ù ◊©◊¢◊ë◊ï◊® ◊ì◊®◊ô ◊î◊®◊ó◊ï◊ë, ◊î◊®◊ó◊ï◊ë ◊î◊ï◊ê ◊ó◊ú◊ß ◊ë◊ú◊™◊ô ◊†◊§◊®◊ì ◊û◊ñ◊î◊ï◊™◊ù. ◊ú◊õ◊ü ◊ú◊ê ◊†◊ô◊™◊ü ◊§◊©◊ï◊ò ◊ú◊î◊ï◊¶◊ô◊ê ◊ê◊ï◊™◊ù ◊û◊î◊û◊®◊ó◊ë ◊î◊¢◊ô◊®◊ï◊†◊ô ◊ê◊ï ◊ú◊†◊°◊ï◊™ ◊ú◊î◊§◊®◊ô◊ì ◊ë◊ô◊†◊ù ◊ú◊ë◊ô◊ü ◊î◊®◊ó◊ï◊ë. ◊ú◊§◊ô◊õ◊ö, ◊î◊§◊®◊ï◊ô◊ß◊ò ◊û◊¶◊ô◊¢ ◊ô◊¶◊ô◊®◊™ ◊û◊®◊ó◊ë ◊®◊ó◊ï◊ë ◊ó◊ì◊©◊†◊ô ◊ï◊û◊õ◊ë◊ì, ◊©◊û◊ï◊™◊ê◊ù ◊ú◊¶◊®◊õ◊ô◊ù ◊©◊ú◊î◊ù ◊ï◊û◊©◊™◊ú◊ë ◊ë◊ó◊ñ◊ï◊™ ◊î◊¢◊ô◊®.

◊ú◊ê◊ó◊® ◊û◊ó◊ß◊® ◊û◊¢◊û◊ô◊ß, ◊ë◊ó◊®◊†◊ï ◊ú◊î◊™◊û◊ß◊ì ◊ë◊°◊û◊ò◊î ◊û◊ï◊ñ◊†◊ó◊™ ◊ë◊©◊õ◊ï◊†◊™ ◊î◊ì◊® ◊ë◊ó◊ô◊§◊î, ◊°◊û◊ï◊ö ◊ú"◊ô◊ó◊ô◊ì◊î ◊ú◊°◊ô◊ï◊¢ ◊ú◊ì◊®◊ô ◊®◊ó◊ï◊ë" ◊ë◊®◊ó◊ï◊ë ◊ì◊ë◊ï◊®◊î. ◊û◊ô◊ß◊ï◊ù ◊ñ◊î ◊û◊ê◊§◊©◊® ◊ú◊†◊ï ◊ú◊î◊¶◊ô◊¢ ◊§◊™◊®◊ï◊ü ◊©◊û◊©◊ú◊ë ◊ê◊™ ◊™◊û◊ô◊õ◊™ ◊î◊ß◊î◊ô◊ú◊î ◊¢◊ù ◊û◊®◊ó◊ë ◊û◊ï◊™◊ê◊ù, ◊ï◊ë◊õ◊ö ◊ú◊ß◊ì◊ù ◊°◊ë◊ô◊ë◊î ◊†◊í◊ô◊©◊î ◊ï◊™◊ï◊û◊õ◊™.

`,
    credits: "◊û◊†◊ó◊ô◊ù     ◊ê◊ì◊®' ◊ê◊ú◊ô◊¢◊ñ◊® ◊î◊ô◊®◊© | ◊°◊ò◊ï◊ì◊ô◊ï     ◊ê◊ì◊®' ◊©◊í◊ô◊™ ◊ï◊ß◊†◊ô◊ü ◊ë◊ú◊§◊®◊û◊ü",
    relatedImages: [
      { src: "./imgaes/concept/capsules/capsuls.png", title: "◊î◊ì◊û◊ô◊ô◊î" },
      { src: "./imgaes/concept/capsules/caps2.png", title: "◊î◊¢◊û◊ì◊î" },
      { src: "./imgaes/concept/capsules/caps4.png", title: " ◊ß◊§◊°◊ï◊ú◊ï◊™ ◊ê'" },
      { src: "./imgaes/concept/capsules/caps5.png", title: "◊ß◊§◊°◊ï◊ú◊ï◊™ ◊ë" },
      { src: "./imgaes/concept/capsules/caps6.png", title: "◊§◊®◊ò◊ô ◊î◊ô◊ô◊©◊ï◊ù" },
      { src: "./imgaes/concept/capsules/caps3.png", title: "◊î◊ì◊û◊ô◊ô◊î" },
    ],
  },
  {
    src: "./imgaes/public/insideOut/cover.png",
    title: "Inside-Out",
    date: '◊™◊©◊§"◊ì | ◊°◊û◊°◊ò◊® ◊ê◊ë◊ô◊ë 2024',
    location: "Eilat, Israel",
    exactLocation: { x: 29.55805, y: 34.94821 },
    category: ["public", "residential", "urban", "concept"],
    objectPosition: "top",
    description: `◊°◊ò◊ï◊ì◊ô◊ï ◊û◊ë◊†◊î ◊û◊ï◊®◊õ◊ë | ◊ß◊û◊§◊ï◊° ◊ó◊ô◊†◊ï◊õ◊ô-◊ó◊ì◊©◊†◊ô-◊ó◊ë◊®◊™◊ô, ◊ê◊ô◊ú◊™.`,
    description1: `◊î◊†◊ï◊©◊ê ◊î◊†◊ó◊ß◊® | ◊ó◊ì◊©◊†◊ï◊™, ◊ß◊î◊ô◊ú◊î, ◊û◊í◊ï◊®◊ô◊ù, ◊™◊†◊ï◊¢◊î, ◊ó◊ô◊§◊ï◊© ◊ï◊í◊ô◊ú◊ï◊ô.`,
    extraParagraph: `◊õ◊ì◊ô ◊ú◊î◊©◊ô◊í ◊û◊®◊ß◊ù ◊©◊ô◊î◊ï◊ï◊î ◊™◊©◊™◊ô◊™ ◊ú◊î◊©◊í◊™ ◊¢◊ô◊®◊ï◊†◊ô◊ï◊™ ◊ò◊ï◊ë◊î, ◊î◊§◊®◊ï◊ô◊ß◊ò ◊û◊†◊°◊î ◊ú◊ó◊ï◊ú◊ú ◊û◊î◊§◊ö ◊ë◊û◊®◊õ◊ñ ◊î◊¢◊ô◊® ◊ê◊ô◊ú◊™ ◊ï◊ú◊ú◊õ◊ì◊ï ◊ú◊ô◊ó◊ô◊ì◊î ◊¢◊ô◊®◊ï◊†◊ô◊™ ◊ë◊¢◊ú◊™ ◊ê◊ô◊õ◊ï◊ô◊ï◊™ ◊í◊ë◊ï◊î◊ï◊™ ◊ë◊õ◊ú ◊î◊ô◊ë◊ò. ◊ë◊†◊ï◊°◊£, ◊ë◊û◊ô◊ß◊ï◊ù ◊î◊ô◊ô◊ó◊ï◊ì◊ô ◊©◊ú ◊ê◊ô◊ú◊™ ◊î◊û◊®◊ï◊ó◊ß◊™ ◊û◊î◊û◊®◊õ◊ñ◊ô◊ù ◊î◊¢◊ô◊®◊ï◊†◊ô◊ô◊ù ◊î◊í◊ì◊ï◊ú◊ô◊ù, ◊ß◊û◊§◊ï◊° ◊ó◊ô◊†◊ï◊õ◊ô, ◊™◊®◊ë◊ï◊™◊ô ◊ï◊ó◊ë◊®◊™◊ô ◊†◊ï◊©◊ê ◊¢◊ô◊û◊ï ◊ó◊©◊ô◊ë◊ï◊™ ◊®◊ë◊î ◊ú◊î◊™◊§◊™◊ó◊ï◊™ ◊î◊¢◊ô◊®◊ï◊†◊ô◊™ ◊ï◊î◊ó◊ë◊®◊™◊ô◊™. ◊ë◊†◊ï◊°◊£, ◊î◊ï◊ê ◊ô◊õ◊ï◊ú ◊ú◊°◊§◊ß ◊í◊ô◊©◊î ◊ú◊û◊©◊ê◊ë◊ô ◊ê◊ï◊û◊†◊ï◊™ ◊û◊í◊ï◊ï◊†◊ô◊ù, ◊°◊ì◊†◊ê◊ï◊™, ◊ß◊ï◊®◊°◊ô◊ù ◊ï◊ê◊ô◊®◊ï◊¢◊ô ◊™◊®◊ë◊ï◊™, ◊î◊û◊¢◊¶◊ô◊û◊ô◊ù ◊ê◊™ ◊î◊ß◊î◊ô◊ú◊î ◊î◊û◊ß◊ï◊û◊ô◊™. ◊õ◊û◊ï ◊õ◊ü, ◊î◊û◊®◊õ◊ñ ◊ô◊õ◊ï◊ú ◊ú◊î◊ï◊ï◊™ ◊§◊ú◊ò◊§◊ï◊®◊û◊î ◊ú◊§◊ô◊™◊ï◊ó ◊õ◊ô◊©◊ï◊®◊ô◊ù ◊ê◊ï◊û◊†◊ï◊™◊ô◊ô◊ù ◊ú◊ó◊ô◊ñ◊ï◊ß ◊î◊ß◊©◊®◊ô◊ù ◊î◊ó◊ë◊®◊™◊ô◊ô◊ù ◊ï◊ú◊î◊¢◊©◊®◊™ ◊ó◊ô◊ô ◊î◊™◊®◊ë◊ï◊™ ◊©◊ú ◊ê◊ô◊ú◊™. ◊î◊ß◊û◊§◊ï◊° ◊™◊ï◊õ◊†◊ü ◊õ◊ö ◊©◊û◊ë◊ó◊ï◊• ◊ê◊ô◊ü ◊ê◊§◊©◊®◊ï◊™ ◊ú◊î◊ë◊ô◊ü ◊û◊î ◊û◊™◊®◊ó◊© ◊ë◊§◊†◊ô◊ù ◊ï◊ú◊ê◊ó◊® ◊î◊ó◊ô◊§◊ï◊©, ◊û◊í◊ú◊ô◊ù ◊ó◊¶◊® ◊¢◊ô◊®◊ï◊†◊ô◊™, ◊ê◊©◊® ◊™◊ó◊ï◊û◊î ◊ë◊§◊ï◊†◊ß◊¶◊ô◊ï◊™ ◊î◊û◊í◊ï◊ï◊†◊ï◊™ ◊©◊î◊û◊®◊õ◊ñ ◊û◊¶◊ô◊¢. 

`,
    credits:
      "◊û◊†◊ó◊ô◊ù     ◊ê◊ì◊®' ◊í◊ú◊ô ◊ú◊ô◊õ◊ò◊†◊ï◊ë ◊ï◊ì''◊® ◊û◊®◊í◊ú◊ô◊™ | ◊°◊ò◊ï◊ì◊ô◊ï     ◊ê◊ì◊®' ◊ê◊ï◊®◊ô ◊®◊ï◊†◊ü ,◊ê◊ì◊®' ◊¢◊û◊ô ◊©◊†◊¢◊®",
    relatedImages: [
      { src: "./imgaes/public/insideOut/cover.png", title: "◊î◊ì◊û◊ô◊ô◊î" },
      { src: "./imgaes/public/insideOut/Shetah.png", title: "◊†◊ô◊™◊ï◊ó ◊©◊ò◊ó" },
      {
        src: "./imgaes/public/insideOut/Involvment.png",
        title: "◊†◊ô◊™◊ï◊ó ◊ê◊™◊® ◊î◊™◊¢◊®◊ë◊ï◊™",
      },
      {
        src: "./imgaes/public/insideOut/Plans.png",
        title: "◊™◊ï◊õ◊†◊ô◊ï◊™ ◊ï◊ó◊ñ◊ô◊™◊ï◊™",
      },
      {
        src: "./imgaes/public/insideOut/Plans2.png",
        title: "◊™◊ï◊õ◊†◊ô◊ï◊™ ◊ï◊ó◊ñ◊ô◊™◊ï◊™",
      },
      { src: "./imgaes/public/insideOut/hatahim.png", title: "◊ó◊™◊õ◊ô◊ù " },
    ],
  },
];

document.addEventListener("DOMContentLoaded", () => {
  const gallery = document.querySelector(".gallery");
  const lightbox = document.getElementById("lightbox");
  const lightboxImg = document.querySelector(".lightbox-img");
  const closeBtn = document.querySelector(".close");

  // Keys to track each image separately in localStorage
  const imageKeys = [
    "img1",
    "img2",
    "img3",
    "img4",
    "img5",
    "img6",
    "img7",
    "img8",
    "img9",
    "img10",
    "img11",
    "img12",
    "img13",
    "img14",
    "img15",
  ];

  // Loop over each image and render it in the gallery
  gallery.innerHTML = ""; // ‚úÖ Clear the gallery before rendering

  const zoomOverlay = document.getElementById("zoom-overlay");
  const zoomImage = document.getElementById("zoom-image");
  const zoomClose = document.getElementById("zoom-close");

  zoomClose.addEventListener("click", () => {
    zoomOverlay.classList.add("hidden");
  });

  zoomOverlay.addEventListener("click", (e) => {
    // Optional: click outside the image closes too
    if (e.target === zoomOverlay) {
      zoomOverlay.classList.add("hidden");
    }
  });

  images.forEach((img, index) => {
    const item = document.createElement("div");
    item.classList.add("gallery-item");

    const image = document.createElement("img");
    image.src = img.src;
    image.alt = img.title;
    image.classList.add("gallery-image");

    // Object position
    const isPortrait = image.naturalHeight > image.naturalWidth;
    image.classList.toggle("portrait", isPortrait);
    image.style.objectPosition = img.objectPosition || "center";

    // View counter
    const viewsKey = `img_${index}`;
    let storedViews = parseInt(localStorage.getItem(viewsKey)) || 0;
    const viewCounter = document.createElement("div");
    viewCounter.className = "views";
    viewCounter.textContent = `üëÅÔ∏è ${storedViews}`;

    // Image click logic
    item.addEventListener("click", () => {
      storedViews++;
      localStorage.setItem(viewsKey, storedViews);
      viewCounter.textContent = `üëÅÔ∏è ${storedViews}`;
      lightbox.classList.remove("hidden");
      lightboxImg.src = img.src;

      // Description
      document.getElementById("lightbox-description").textContent =
        img.description || "";
      document.getElementById("lightbox-description1").textContent =
        img.description1 || "";

      // Map
      const lat = img.exactLocation.x;
      const lng = img.exactLocation.y;
      const staticMapUrl = `https://maps.locationiq.com/v3/staticmap?key=pk.069fe51b456f904e1abfc7ab645dd9bd&center=${lat},${lng}&zoom=13&size=300x150&markers=icon:small-red-cutout|${lat},${lng}`;
      const googleMapsUrl = `https://www.google.com/maps/search/?api=1&query=${lat},${lng}`;
      document.getElementById("lightbox-map").innerHTML = `
        <a href="${googleMapsUrl}" target="_blank" style="display: inline-block; margin-bottom: 10px;">
          <img src="${staticMapUrl}" alt="Location Map" style="width: 100%; border-radius: 8px;">
        </a>
      `;
      document.getElementById("lightbox-title").textContent = img.title || "";
      document.getElementById("lightbox-date").textContent = img.date || "";
      document.getElementById("lightbox-description").textContent =
        img.description || "";
      document.getElementById("lightbox-description1").textContent =
        img.description1 || "";
      document.getElementById("lightbox-extra").textContent =
        img.extraParagraph || "";
      document.getElementById("lightbox-credits").textContent =
        img.credits || "";

      // Related images
      const galleryDiv = document.getElementById("lightbox-gallery");
      galleryDiv.innerHTML = "";
      (img.relatedImages || []).slice(0, 7).forEach((related) => {
        const thumbWrapper = document.createElement("div");

        const thumb = document.createElement("img");
        thumb.src = related.src;
        thumb.alt = related.title;
        const zoomOverlay = document.getElementById("zoom-overlay");
        const zoomImage = document.getElementById("zoom-image");

        let zoomTimeout;

        thumb.addEventListener("click", () => {
          zoomImage.src = thumb.src;
          zoomOverlay.classList.remove("hidden");
        });

        zoomOverlay.addEventListener("mouseleave", () => {
          zoomTimeout = setTimeout(() => {
            zoomOverlay.classList.add("hidden");
          }, 10); // delay slightly
        });

        const title = document.createElement("div");
        title.className = "thumb-title";
        title.textContent = related.title;

        thumbWrapper.appendChild(thumb);
        thumbWrapper.appendChild(title);
        galleryDiv.appendChild(thumbWrapper);
      });
    });

    // Optional: caption
    const caption = document.createElement("div");
    caption.className = "caption";
    caption.textContent = img.title;

    item.appendChild(image);
    item.appendChild(caption);
    item.appendChild(viewCounter);
    gallery.appendChild(item);

    // Close with X button
    const closeBtn = document.querySelector(".close");
    closeBtn.addEventListener("click", () => {
      lightbox.classList.add("hidden");
    });

    // Close by clicking outside content
    lightbox.addEventListener("click", (e) => {
      if (e.target === lightbox) {
        lightbox.classList.add("hidden");
      }
    });
  });
});
// Close lightbox

// Category filtering
document.addEventListener("DOMContentLoaded", () => {
  const categoryButtons = document.querySelectorAll(".category-button");
  const galleryItems = document.querySelectorAll(".gallery-item");
  console.log("clicked");
  categoryButtons.forEach((button) => {
    button.addEventListener("click", () => {
      const selectedCategory = button
        .getAttribute("data-category")
        .toLowerCase();

      galleryItems.forEach((item, index) => {
        const img = images[index];

        if (!img) {
          item.style.display = "none";
          return;
        }

        let itemCategories = img.category;

        // Ensure itemCategories is always an array
        if (!Array.isArray(itemCategories)) {
          itemCategories = [itemCategories];
        }

        // Lowercase all categories for comparison
        const lowerCaseCategories = itemCategories.map((cat) =>
          cat.toLowerCase()
        );

        if (
          selectedCategory === "all" ||
          lowerCaseCategories.includes(selectedCategory)
        ) {
          item.style.display = "block";
        } else {
          item.style.display = "none";
        }
      });

      // Highlight the active button
      categoryButtons.forEach((btn) => btn.classList.remove("active"));
      button.classList.add("active");
    });
  });
});
//hamburger menu
document.addEventListener("DOMContentLoaded", () => {
  const hamburger = document.getElementById("hamburger");
  const navLinks = document.getElementById("nav-links");

  hamburger.addEventListener("click", () => {
    navLinks.classList.toggle("show");
    document.body.classList.toggle("no-scroll");

    const isOpen = navLinks.classList.contains("show");

    hamburger.innerHTML = isOpen ? "‚úñ" : "‚ò∞";
    hamburger.style.backgroundColor = isOpen ? "#fff" : "transparent";
    hamburger.style.color = isOpen ? "#000" : "var(--text-color)";
  });
});
//
// Dark Theme
document.addEventListener("DOMContentLoaded", () => {
  const toggleButton = document.getElementById("theme-toggle");

  console.log("Toggle button found:", toggleButton); // ‚úÖ SHOULD LOG!

  if (!toggleButton) {
    console.error("Toggle button not found in DOM!");
    return;
  }

  const currentTheme = localStorage.getItem("theme") || "light";
  document.documentElement.setAttribute("data-theme", currentTheme);

  toggleButton.innerHTML =
    currentTheme === "dark"
      ? '<i class="fa-solid fa-moon"></i>'
      : '<i class="fa-solid fa-sun"></i>';

  toggleButton.addEventListener("click", () => {
    console.log("Theme toggle clicked!"); // ‚úÖ SHOULD LOG ON CLICK

    const theme = document.documentElement.getAttribute("data-theme");
    const newTheme = theme === "light" ? "dark" : "light";
    document.documentElement.setAttribute("data-theme", newTheme);
    localStorage.setItem("theme", newTheme);

    toggleButton.innerHTML =
      newTheme === "dark"
        ? '<i class="fa-solid fa-moon"></i>'
        : '<i class="fa-solid fa-sun"></i>';
  });
});

const isPortrait = img.naturalHeight > img.naturalWidth;
image.classList.toggle("portrait", isPortrait);
if (!isPortrait) {
  image.style.objectPosition = img.objectPosition || "center";
}

//// progress bar

// accessability
nl_pos = "tr";
nl_color = "yellow";
nl_dir = "./nagishli_v3.0_beta_rev170120200211/nagishli_v3_beta/";
nl_lang = "he";
